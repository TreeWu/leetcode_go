package main

import "fmt"

/**
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:

给定数组 nums = [1,1,2],

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。

 */


/**
解法思路：
双指针，因为是已经排序好的数组，所以不会出现 [1,2,3,4,1]这样的情况
前后指针，后面的指针只有与前面指针不相同的时候，才会更新
返回后面指针的长度
*/
func removeDuplicates(nums []int) int {
	i:=0
	for j:=1;j<len(nums);j++{
		if nums[i]!=nums[j] {
			nums[i+1] = nums[j]
			i++
		}
	}
	return i
}

func main(){

	arr:=[]int{1,1,2,2,3,3,4,4}

	duplicates := removeDuplicates(arr)

	fmt.Println(arr[:duplicates+1])
}
